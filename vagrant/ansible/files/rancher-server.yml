---
- hosts: rancherserver
  vars:
    server_version: 1.1.4
    rancher_server: "{{ RANCHER_SERVER }}"
    rancher_port: "{{ RANCHER_PORT }}"
    registry_port: "{{ REGISTRY_PORT }}"
    admin_user: "{{ ADMIN_USER }}"
    admin_pass: "{{ ADMIN_PASS }}"
    api_user: "{{ API_USER }}"
    api_pass: "{{ API_PASS }}"
    create_api_key_body:
      accountId: "1a1"
      description: "provisioner"
      name: "provisioner"
      publicValue: "{{ api_user }}"
      secretValue: "{{ api_pass }}"
      _hack: null
    enable_local_auth_body:
      accessMode: "restricted"
      enabled: true
      name: "{{ admin_user }}"
      password: "{{ admin_pass }}"
      username: "{{ admin_user }}"
      _hack: null
  sudo: yes

  tasks:

  - name: Pull and run Docker Registry
    docker:
        name: registry
        image: registry:2
        state: reloaded
        restart_policy: always
        detach: True
        net: bridge
        ports:
            - "{{ registry_port }}:{{ registry_port }}"
        volumes:
            - /tmp/rancherserver/auth:/auth
            - /tmp/rancherserver/ssl:/ssl
        env:
            REGISTRY_AUTH: htpasswd
            REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
            REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
            REGISTRY_HTTP_TLS_CERTIFICATE: /ssl/certificates/mi.org.crt
            REGISTRY_HTTP_TLS_KEY: /ssl/private/mi.org.key


  - name: Delete old Rancher directory from a previous run
    file: path=/var/rancher state=absent

  - name: Create mount volume directories for persistent rancher server data
    file: path={{ item.path }} state=directory mode="a+rw"
    with_items:
      - { path: '/var/rancher/lib/mysql' }
      - { path: '/var/rancher/log/mysql' }
      - { path: '/var/rancher/lib/cattle' }

  - name: Purge any data from a previous execution
    action: command docker rm -f rancherserver
    ignore_errors: yes

  - name: Pull and run Rancher server container
    docker:
      name: rancherserver
      image: rancher/server:v{{ server_version }}
      state: reloaded
      restart_policy: always
      detach: True
      net: bridge
      ports:
      - "{{ rancher_port }}:{{ rancher_port }}"
      volumes:
      - /var/rancher/lib/cattle:/var/lib/cattle
      - /var/rancher/lib/mysql:/var/lib/mysql
      - /var/rancher/log/mysql:/var/log/mysql

  - name: Wait for the Rancher server to start
    action: command docker logs rancherserver
    register: rancher_logs
    until: rancher_logs.stdout.find("Startup Succeeded") != -1
    retries: 30
    delay: 10

  - name: Check if auth is enabled
    uri:
      method: GET
      return_content: yes
      url: "http://{{ rancher_server }}:{{ rancher_port }}/v1"
    register: auth_enabled
    until: auth_enabled.status == 401
    ignore_errors: yes

  - name: Add API access key to admin account
    uri:
      method: POST
      status_code: 201
      force_basic_auth: yes
      user: "{{ api_user }}"
      password: "{{ api_pass }}"
      url: "http://{{ rancher_server }}:{{ rancher_port }}/v1/apikeys"
      body_format: json
      body: "{{ create_api_key_body | to_json }}"
    when: auth_enabled|failed
    register: api_access

  - name: Enable local authentication and setup rancher server admin user
    uri:
      method: POST
      status_code: 201
      force_basic_auth: yes
      user: "{{ api_user }}"
      password: "{{ api_pass }}"
      url: "http://{{ rancher_server }}:{{ rancher_port }}/v1/localauthconfigs"
      body_format: json
      body: "{{ enable_local_auth_body | to_json }}"
    when: auth_enabled|failed
    register: local_auth

  - debug: var=local_auth

  - name: Confirm admin access to API
    uri:
      method: GET
      status_code: 200
      force_basic_auth: yes
      user: "{{ api_user }}"
      password: "{{ api_pass }}"
      url: "http://{{ rancher_server }}:{{ rancher_port }}/v1"
