---
- hosts: agents
  vars:
    agent_version: 1.0.2
    rancher_server: "{{ RANCHER_SERVER }}"
    rancher_port: "{{ RANCHER_PORT }}"
    api_user: "{{ API_USER }}"
    api_pass: "{{ API_PASS }}"

  become: true
  tasks:
    - name: Wait for the rancher server to be up
      uri:
        method: GET
        return_content: yes
        url: "http://{{ rancher_server }}:{{ rancher_port }}/v1"
      register: server_alive
      until: server_alive.status == 401
      ignore_errors: yes
      retries: 30
      delay: 10

    - name: Get the default rancher project id
      uri:
        method: GET
        status_code: 200
        force_basic_auth: yes
        user: "{{ api_user }}"
        password: "{{ api_pass }}"
        url: "http://{{ rancher_server }}:{{ rancher_port }}/v1/projects"
        return_content: yes
      register: project_id

    - name: Return the registration token URL of Rancher server
      uri:
        method: POST
        status_code: 201
        force_basic_auth: yes
        user: "{{ api_user }}"
        password: "{{ api_pass }}"
        url: "http://{{ rancher_server }}:{{ rancher_port }}/v1/registrationtokens?projectId={{ project_id.json['data'][0]['id'] }}"
        return_content: yes
      register: rancher_token_url

    - name: Return the registration URL of Rancher server
      uri:
        method: GET
        status_code: 200
        force_basic_auth: yes
        user: "{{ api_user }}"
        password: "{{ api_pass }}"
        url: "{{ rancher_token_url.json['links']['self'] }}"
        return_content: yes
      register: rancher_token

    - name: Purge any data from a previous execution
      action: command docker rm -f rancheragent
      ignore_errors: yes

    - name: Register the Agent Host machine with the Rancher server
      docker:
        name: rancheragent
        image: rancher/agent:v{{ agent_version }}
        privileged: yes
        detach: True
        volumes: /var/run/docker.sock:/var/run/docker.sock
        command: "{{ rancher_token.json['registrationUrl'] }}"
        state: reloaded
        net: bridge
        restart_policy: always

    - name: Wait for the Rancher agent to register with server
      uri:
        method: GET
        status_code: 200
        force_basic_auth: yes
        user: "{{ api_user }}"
        password: "{{ api_pass }}"
        url: "http://{{ rancher_server }}:{{ rancher_port }}/v1/hosts"
        return_content: yes
      register: rancher_hosts
      until: rancher_hosts.content.find("{{ ansible_hostname }}") != -1
      retries: 10
      delay: 5

